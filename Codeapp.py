import streamlit as st
import pandas as pd
import re
import math
from decimal import Decimal, ROUND_HALF_UP
from datetime import datetime
from io import BytesIO

# ==================== PAGE CONFIGURATION ====================
st.set_page_config(
    page_title="bewild V-R100 Tools",
    page_icon="üßæ",
    layout="centered",
    initial_sidebar_state="expanded"
)

# ==================== CUSTOM STYLING ====================
st.markdown("""
<style>
  .main { background: linear-gradient(135deg, #e3f2fd 0%, #fff 100%); }
  [data-testid="stSidebar"] { background: linear-gradient(180deg, #bbdefb 0%, #e3f2fd 100%); }
  .stButton>button { background: linear-gradient(90deg, #42a5f5 0%, #2196f3 100%); color:#fff; border:none; border-radius:8px; padding:.5rem 1.5rem; font-weight:500; transition:.3s; box-shadow:0 2px 5px rgba(33,150,243,.3); }
  .stButton>button:hover { transform: translateY(-2px); }
  .stDownloadButton>button { background: linear-gradient(90deg, #26c6da 0%, #00acc1 100%); color:#fff; border:none; border-radius:8px; padding:.5rem 1.5rem; font-weight:500; box-shadow:0 2px 5px rgba(0,172,193,.3); }
  .stDownloadButton>button:hover { transform: translateY(-2px); }
  .stForm { background:#fff; padding:1.5rem; border-radius:12px; box-shadow:0 2px 10px rgba(0,0,0,.05); border:1px solid #e3f2fd; }
  h1,h2,h3 { color:#1565c0; }
  .stDataFrame { border-radius:8px; overflow:hidden; box-shadow:0 2px 8px rgba(0,0,0,.05); }
</style>
""", unsafe_allow_html=True)

# ==================== CONSTANTS ====================
CANDIDATE_HEADERS = {
    "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "ITEM CODE", "ITEMCODE", "SAPID", "MATERIAL", "MATERIAL ID",
    "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "ITEMNAME", "NAME ITEM", "NAMEITEM", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "SKU DESCRIPTION",
    "‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î", "BARCODE", "UNIT BARCODE", "SCANCODE1",
    "UNITQTY", "QTY", "PACK", "‡∏ä‡∏¥‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Ñ", "‡∏£‡∏ß‡∏°‡∏ä‡∏¥‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Ñ", "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Ñ",
    "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢", "PRICE", "UNIT PRICE", "RETAIL PRICE", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"
}

EJ_ENCODINGS = ["utf-8-sig", "utf-8", "cp874", "tis-620", "utf-16le"]

NON_ITEM_KEYWORDS = (
    "‡∏£‡∏ß‡∏°", "‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥", "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î", "‡∏ó‡∏≠‡∏ô", "‡∏ö‡∏±‡∏ï‡∏£", "‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞", "‡∏ä‡∏≥‡∏£‡∏∞",
    "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î", "‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á", "VAT", "‡∏†‡∏≤‡∏©‡∏µ", "‡∏´‡∏±‡∏ß‡∏ö‡∏¥‡∏•", "‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏¥‡∏•", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "VOID"
)
DISCOUNT_KEYWORDS = (
    "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î", "‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á", "Coupon", "DISCOUNT", "‡πÇ‡∏õ‡∏£", "Promotion", "‡πÇ‡∏õ‡∏£‡∏Ø"
)

PAT_LINE_ITEM = re.compile(r"^\s*(?P<qty>\d+)\s+(?P<name>.+?)\s+(?P<amt>-?[\d\.,\(\)]+)\s*$")
PAT_DISCOUNT  = re.compile(r"^\s*(?:(?P<qty>\d+)\s+)?(?P<name>.+?)\s+(?P<amt>-?\(?[\d\.,]+\)?)\s*$")

# ==================== UTILITY FUNCTIONS ====================
def canonicalize_text(text: str) -> str:
    return re.sub(r"[\s_\-\+\.\(\)\[\]\{\}/\\]+", "", text.strip().upper())

def normalize_string(value) -> str:
    try:
        if pd.isna(value):
            return ""
    except Exception:
        pass
    s = "" if value is None else str(value).strip()
    return "" if s.lower() == "nan" else s

def to_int_safe(value, default=0) -> int:
    try:
        x = pd.to_numeric(value, errors="coerce")
        if pd.isna(x):
            return default
        return int(float(x))
    except Exception:
        return default

def to_satang(value) -> int:
    if value is None:
        return 0
    try:
        if (isinstance(value, float) and math.isnan(value)) or pd.isna(value):
            return 0
    except Exception:
        pass
    s = str(value).strip()
    if not re.fullmatch(r"[+-]?\d+(?:\.\d+)?", s):
        return 0
    decimal_value = Decimal(s).quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
    return int(decimal_value * 100)

def sql_escape_string(s) -> str:
    return "" if s is None else str(s).replace("'", "''")

def get_casio_timestamp() -> str:
    return datetime.now().strftime("%Y%m%d%H%M%S")

def export_to_bytes(sql_text: str, encoding_choice: str) -> bytes:
    fixed = "\r\n".join(line.rstrip("\r\n") for line in sql_text.splitlines())
    enc = "utf-8-sig" if encoding_choice.endswith("SIG") else "utf-8"
    return fixed.encode(enc, errors="ignore")

def export_csv_to_bytes(df: pd.DataFrame) -> bytes:
    return df.to_csv(index=False, lineterminator="\r\n").encode("utf-8-sig")

def export_excel_to_bytes(df: pd.DataFrame, sheet_name="‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤") -> bytes:
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name=sheet_name)
    buffer.seek(0)
    return buffer.getvalue()

# ==================== EXCEL READING (FIXED) ====================
def read_excel_smart(file_obj, manual_sheet: str | None = None) -> tuple[pd.DataFrame, str, int]:
    """
    ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏ö‡∏ö‡∏â‡∏•‡∏≤‡∏î:
    - ‡∏™‡πÅ‡∏Å‡∏ô '‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ó' ‡πÅ‡∏•‡∏∞ '‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏° CANDIDATE_HEADERS (+‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏£‡∏≤‡∏Ñ‡∏≤')
    - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ (DataFrame, ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å, ‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    - ‡∏ñ‡πâ‡∏≤ manual_sheet ‡∏£‡∏∞‡∏ö‡∏∏‡∏°‡∏≤ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ó‡∏ô‡∏±‡πâ‡∏ô (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡∏ô‡∏±‡πâ‡∏ô)
    """
    data = file_obj.read()
    excel_file = pd.ExcelFile(BytesIO(data))

    target_sheets = [manual_sheet] if manual_sheet else excel_file.sheet_names

    best_sheet = None
    best_row   = 0
    best_score = -1
    candidate_set = {canonicalize_text(h) for h in CANDIDATE_HEADERS}

    for sheet_name in target_sheets:
        df_probe = pd.read_excel(BytesIO(data), sheet_name=sheet_name, header=None, dtype=str)
        limit = min(20, len(df_probe))
        local_best_row = 0
        local_best_score = -1

        for i in range(limit):
            row = [str(x) if pd.notna(x) else "" for x in df_probe.iloc[i].tolist()]
            score = sum(1 for v in row if canonicalize_text(v) in candidate_set)
            # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏£‡∏≤‡∏Ñ‡∏≤" ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ
            if any("‡∏£‡∏≤‡∏Ñ‡∏≤" in str(v) for v in row):
                score += 2
            # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏¢‡∏≠‡∏∞ (‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á)
            non_empty_cols = sum(1 for v in row if str(v).strip() != "")
            score += min(non_empty_cols, 3) * 0.1

            if score > local_best_score:
                local_best_score = score
                local_best_row = i

        if local_best_score > best_score:
            best_score = local_best_score
            best_sheet = sheet_name
            best_row   = local_best_row

    # fallback
    if best_sheet is None:
        best_sheet = target_sheets[0]
        best_row = 0

    df = pd.read_excel(BytesIO(data), sheet_name=best_sheet, header=best_row, dtype=str)
    return df, best_sheet, best_row

# ==================== NORMALIZE PRODUCT DF ====================
def normalize_uploaded_dataframe(df_raw: pd.DataFrame) -> pd.DataFrame:
    columns = list(df_raw.columns)
    column_map = {canonicalize_text(c): c for c in columns}

    def pick_column(names):
        for name in names:
            key = canonicalize_text(name)
            if key in column_map:
                return column_map[key]
        return None

    col_itemcode = pick_column(["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤","ITEM CODE","ITEMCODE","SAPID","MATERIAL","MATERIAL ID"])
    col_itemname = pick_column(["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤","ITEMNAME","NAMEITEM","NAME ITEM","SKU DESCRIPTION","‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"])
    col_barcode  = pick_column(["‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î","BARCODE","UNIT BARCODE","SCANCODE1"])
    col_price    = pick_column(["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢","PRICE","UNIT PRICE","RETAIL PRICE","‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
    col_unitqty  = pick_column(["UNITQTY","QTY","PACK","‡∏ä‡∏¥‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Ñ","‡∏£‡∏ß‡∏°‡∏ä‡∏¥‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Ñ","‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Ñ"])

    out = pd.DataFrame()
    out["ITEMCODE"]  = df_raw[col_itemcode] if col_itemcode else ""
    out["ITEMNAME"]  = df_raw[col_itemname] if col_itemname else ""
    out["SCANCODE1"] = df_raw[col_barcode]  if col_barcode  else ""
    out["UNITQTY"]   = pd.to_numeric(df_raw[col_unitqty], errors="coerce").fillna(1).astype(int) if col_unitqty else 1

    # ‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô)
    if col_price:
        raw_price = df_raw[col_price].astype(str).str.strip()
        is_numeric = raw_price.str.fullmatch(r"[+-]?\d+(?:[.,]\d+)?")
        base_baht = pd.to_numeric(
            raw_price.str.replace(",", "", regex=False).str.replace("‡∏ø", "", regex=False),
            errors="coerce"
        ).where(is_numeric)
    else:
        base_baht = pd.Series([None]*len(df_raw), index=df_raw.index, dtype="float")
    out["UNITPRICE"] = base_baht

    # ‡πÇ‡∏õ‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    thai_to_arabic = str.maketrans("‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô","0123456789")
    row_texts = df_raw.apply(lambda r: " ".join([str(v) for v in r.values if pd.notna(v)]).translate(thai_to_arabic).lower(), axis=1)
    promo_rules = [
        (re.compile(r"3\s*‡∏ä‡∏¥‡πâ‡∏ô\s*100"), 50.0),
        (re.compile(r"4\s*‡∏ä‡∏¥‡πâ‡∏ô\s*100"), 35.0),
        (re.compile(r"50\s*/\s*2\s*‡∏ä‡∏¥‡πâ‡∏ô\s*100"), 80.0),
    ]
    override = pd.Series([None]*len(df_raw), index=df_raw.index, dtype="object")
    for pattern, baht in promo_rules:
        override.loc[row_texts.str.contains(pattern, regex=True, na=False)] = baht
    out.loc[override.notna(), "UNITPRICE"] = override[override.notna()].astype(float)

    out["ITEMPARMCODE"] = "000001"
    out["UNITWEIGHT"]   = 0
    out["TAXCODE_1"]    = "01"

    for c in ["ITEMCODE","ITEMNAME","SCANCODE1","ITEMPARMCODE","TAXCODE_1"]:
        out[c] = out[c].astype("string").fillna("").astype(str).str.strip()
    out["UNITPRICE"] = out["UNITPRICE"].fillna(0).apply(to_satang)

    out = out[~((out["ITEMCODE"] == "") & (out["ITEMNAME"] == ""))].reset_index(drop=True)
    return out

# ==================== SQL GENERATION ====================
def generate_row_sql_cia001(row: pd.Series, timestamp: str) -> str:
    raw_code = normalize_string(row.get("ITEMCODE", ""))
    itemcode = raw_code.zfill(12) if raw_code else ""
    scancode1 = normalize_string(row.get("SCANCODE1", ""))
    itemname = normalize_string(row.get("ITEMNAME", ""))

    dept      = "bewild"
    parm      = normalize_string(row.get("ITEMPARMCODE", "000001"))
    taxcode_1 = normalize_string(row.get("TAXCODE_1", "01"))

    unitweight = to_int_safe(row.get("UNITWEIGHT", 0), 0)
    unitqty    = to_int_safe(row.get("UNITQTY",   1), 1)
    unitprice  = to_int_safe(row.get("UNITPRICE", 0), 0)

    delete_sql = f"DELETE FROM CIA001 WHERE ITEMCODE='{sql_escape_string(itemcode)}';"
    insert_sql = (
        "INSERT INTO CIA001 (ITEMCODE, SCANCODE1, ITEMNAME, ITEMDEPTCODE, ITEMPARMCODE, "
        "UNITWEIGHT, UNITQTY, UNITPRICE, TAXCODE_1, CREATEDATETIME, UPDATEDATETIME) VALUES "
        f"('{sql_escape_string(itemcode)}','{sql_escape_string(scancode1)}','{sql_escape_string(itemname)}','{dept}','{sql_escape_string(parm)}',"
        f"{unitweight},{unitqty},{unitprice},'{sql_escape_string(taxcode_1)}','{timestamp}','{timestamp}');"
    )
    return delete_sql + "\n" + insert_sql

def build_sql_cia001(df: pd.DataFrame) -> str:
    timestamp = get_casio_timestamp()
    lines = ["BEGIN TRANSACTION;"]
    for _, row in df.iterrows():
        lines.append(generate_row_sql_cia001(row, timestamp))
    lines.append("COMMIT;")
    return "\n".join(lines)

# ==================== EJ PARSING ====================
def read_text_with_encoding(data: bytes) -> str:
    for encoding in EJ_ENCODINGS:
        try:
            return data.decode(encoding)
        except Exception:
            continue
    return data.decode("utf-8", errors="ignore")

def extract_number_from_text(text: str) -> float:
    text = text.replace(",", "").replace("‡∏ø", "").strip()
    text = text.translate(str.maketrans("‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô", "0123456789"))
    try:
        return float(text)
    except Exception:
        return 0.0

def parse_ej_text(text: str):
    """Parse EJ text and return (receipts, items, discounts)."""
    text = text.replace("\r\n", "\n").replace("\r", "\n")

    receipts = []
    items = []
    discounts = []

    blocks = re.split(r"\n(?=S\n)", "\n" + text)
    for block in blocks:
        if not block.strip().startswith("S\n"):
            continue

        mode = None
        price_total = None
        canceled = False
        body_lines = []

        for raw_line in block.splitlines():
            if raw_line.startswith("HMODE="):
                mode = raw_line.split("=", 1)[1].strip()
            elif raw_line.startswith("HPRICE="):
                price_total = raw_line.split("=", 1)[1].strip()
            elif raw_line.startswith("B"):
                text_line = raw_line[1:].strip()
                if any(keyword in text_line for keyword in ("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å","VOID","Cancel","CANCEL")):
                    canceled = True
                body_lines.append(text_line)

        if mode not in (None, "REG", "REG "):
            continue
        if canceled:
            continue

        for text_line in body_lines:
            if any(keyword in text_line for keyword in DISCOUNT_KEYWORDS):
                m2 = PAT_DISCOUNT.match(text_line)
                if m2:
                    qty_txt = m2.group("qty")
                    times = int(qty_txt) if qty_txt else 1
                    discount_name = m2.group("name").strip()
                    amount_text = m2.group("amt").strip()
                    if amount_text.startswith("(") and amount_text.endswith(")"):
                        amount_text = "-" + amount_text[1:-1]
                    discount_amount = extract_number_from_text(amount_text)
                    discounts.append({"discount": discount_name, "amount": discount_amount, "times": times})
                continue

            if any(keyword in text_line for keyword in NON_ITEM_KEYWORDS):
                continue

            m = PAT_LINE_ITEM.match(text_line)
            if not m:
                continue
            item_name = m.group("name").strip()
            quantity = int(m.group("qty"))
            amount_text = m.group("amt").strip()
            if amount_text.startswith("(") and amount_text.endswith(")"):
                amount_text = "-" + amount_text[1:-1]
            amount = extract_number_from_text(amount_text)
            items.append({"name": item_name, "qty": quantity, "amount": amount})

        if price_total and price_total.strip():
            receipts.append({"amount": extract_number_from_text(price_total)})

    return pd.DataFrame(receipts), pd.DataFrame(items), pd.DataFrame(discounts)

def summarize_items(df_items: pd.DataFrame) -> pd.DataFrame:
    if df_items.empty:
        return pd.DataFrame(columns=["‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô", "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô"])
    return (
        df_items.groupby("name", as_index=False)
        .agg(qty=("qty","sum"), amount=("amount","sum"))
        .rename(columns={"name":"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤","qty":"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô","amount":"‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô"})
        .sort_values(["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô","‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô"], ascending=[False, False])
    )

# ==================== HEADER ====================
st.markdown("<h2 style='text-align:center'>Casio V-R100 Tools</h2>", unsafe_allow_html=True)

# ==================== SIDEBAR ====================
with st.sidebar:
    st.markdown("### ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    vr100_encoding = st.selectbox("Encoding ‡πÑ‡∏ü‡∏•‡πå SQL", ["UTF-8 (‡∏õ‡∏Å‡∏ï‡∏¥)", "UTF-8 with BOM (UTF-8-SIG)"], index=1)
    st.caption("‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡∏à‡∏±‡∏ö‡∏ä‡∏µ‡∏ó + ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á + ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏≠‡∏á ‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢' + ‡πÇ‡∏õ‡∏£‡∏Ñ‡∏á‡∏ó‡∏µ‡πà")
    st.caption("‡πÇ‡∏õ‡∏£: 3‡∏ä‡∏¥‡πâ‡∏ô100‚Üí50‡∏ø, 4‡∏ä‡∏¥‡πâ‡∏ô100‚Üí35‡∏ø, 50/2‡∏ä‡∏¥‡πâ‡∏ô100‚Üí80‡∏ø (‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô)")

# ==================== TABS ====================
tab_product, tab_sales = st.tabs(["üè∑Ô∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (CIA001)", "üìä ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (EJ)"])

# ==================== TAB 1: PRODUCT ====================
with tab_product:
    st.markdown("### ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Excel/CSV ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    st.caption("‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡∏à‡∏±‡∏ö‡∏ä‡∏µ‡∏ó + ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á + ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏≠‡∏á ‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢' + ‡πÇ‡∏õ‡∏£‡∏Ñ‡∏á‡∏ó‡∏µ‡πà")

    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡∏´‡∏£‡∏∑‡∏≠ CSV", type=["xlsx", "csv"], key="upload_product")
    if uploaded_file is not None:
        with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå..."):
            manual_sheet = None
            if uploaded_file.name.lower().endswith(".xlsx"):
                # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ override ‡∏ä‡∏µ‡∏ó‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                data_first = uploaded_file.getvalue()
                xls = pd.ExcelFile(BytesIO(data_first))
                with st.expander("üóÇÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏µ‡∏ó‡πÄ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"):
                    manual_sheet = st.selectbox("‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô", [None] + xls.sheet_names, index=0, format_func=lambda x: "‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥" if x is None else x)
                # ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å bytes ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ file_uploader ‡∏ñ‡∏π‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                uploaded_file = BytesIO(data_first)

            if str(getattr(uploaded_file, "name", "")).lower().endswith(".csv"):
                df_raw = pd.read_csv(uploaded_file, dtype=str, keep_default_na=False)
                chosen_sheet = "CSV"
                header_row = 0
            else:
                df_raw, chosen_sheet, header_row = read_excel_smart(uploaded_file, manual_sheet=manual_sheet)

            df_normalized = normalize_uploaded_dataframe(df_raw)

        st.success(f"‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(df_normalized):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ó: {chosen_sheet} ‚Ä¢ ‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á: {header_row}")
        with st.expander("üëÄ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ (30 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å)", expanded=True):
            st.dataframe(df_normalized.head(30), use_container_width=True, hide_index=True)

        sql_text = build_sql_cia001(df_normalized)
        with st.expander("üìÑ ‡∏î‡∏π SQL (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 50 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å)"):
            st.code("\n".join(sql_text.splitlines()[:50]) + "\n...", language="sql")

        c1, c2 = st.columns(2)
        with c1:
            st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î SQL (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Encoding ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)", export_to_bytes(sql_text, vr100_encoding), file_name="CIA001_bulk_import.sql", mime="text/plain", use_container_width=True)
        with c2:
            st.download_button("üìä Export CSV (‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)", export_csv_to_bytes(df_normalized), file_name="CIA001_data_backup.csv", mime="text/csv", use_container_width=True)

    st.markdown("---")
    st.markdown("### ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    if "single_item_sql" not in st.session_state:
        st.session_state.single_item_sql = ""

    with st.form("single_item_form"):
        c1, c2 = st.columns(2)
        with c1:
            itemcode = st.text_input("üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (SKU)", "")
            itemname = st.text_input("üìù ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "")
        with c2:
            scancode1 = st.text_input("üì± ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î (‡∏ä‡∏¥‡πâ‡∏ô)", "")
            unitqty   = st.number_input("üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢", min_value=1, step=1, value=1)
        price_baht = st.text_input("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô (‡∏ö‡∏≤‡∏ó)", "", placeholder="179.00")
        unitprice  = to_satang(price_baht)
        submitted  = st.form_submit_button("‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL", use_container_width=True)

    if submitted:
        row_data = {"ITEMCODE": itemcode, "SCANCODE1": scancode1, "ITEMNAME": itemname, "UNITQTY": unitqty, "UNITPRICE": unitprice, "ITEMPARMCODE": "000001", "UNITWEIGHT": 0, "TAXCODE_1": "01"}
        timestamp = get_casio_timestamp()
        sql = generate_row_sql_cia001(pd.Series(row_data), timestamp)
        st.session_state.single_item_sql = f"BEGIN TRANSACTION;\n{sql}\nCOMMIT;"
        st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

    if st.session_state.single_item_sql:
        with st.expander("üìÑ ‡∏î‡∏π SQL ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á", expanded=True):
            st.code(st.session_state.single_item_sql, language="sql")
        st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î SQL (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)", export_to_bytes(st.session_state.single_item_sql, vr100_encoding), file_name="CIA001_single_item.sql", mime="text/plain", use_container_width=True)

# ==================== TAB 2: SALES (EJ) ====================
with tab_sales:
    st.markdown("### ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå EJ")
    st.caption("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î log_YYYYMMDD.txt ‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á V-R100 (‡∏≠‡∏±‡∏õ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå) ‚Äî ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ö‡∏¥‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

    ej_files = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå EJ (*.txt)", type=["txt"], accept_multiple_files=True, key="upload_ej_logs")
    if ej_files:
        all_receipts, all_items, all_discounts = [], [], []
        with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå..."):
            for file in ej_files:
                text = read_text_with_encoding(file.read())
                receipts, items, disc = parse_ej_text(text)
                if not receipts.empty: all_receipts.append(receipts)
                if not items.empty:    all_items.append(items)
                if not disc.empty:     all_discounts.append(disc)

        df_receipts = pd.concat(all_receipts, ignore_index=True) if all_receipts else pd.DataFrame(columns=["amount"]).astype({"amount":"float"})
        df_items    = pd.concat(all_items,    ignore_index=True) if all_items    else pd.DataFrame(columns=["name","qty","amount"])
        df_discounts= pd.concat(all_discounts,ignore_index=True) if all_discounts else pd.DataFrame(columns=["discount","amount","times"])

        total_receipts = len(df_receipts)
        total_amount = float(df_receipts["amount"].sum()) if total_receipts else float(df_items["amount"].sum())
        total_qty = int(df_items["qty"].sum()) if not df_items.empty else 0

        c1, c2, c3 = st.columns(3)
        c1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏¥‡∏• (‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)", f"{total_receipts:,}")
        c2.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô (‡∏£‡∏ß‡∏°)", f"{total_qty:,}")
        c3.metric("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{total_amount:,.2f}")

        st.markdown("#### üì¶ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
        df_summary = summarize_items(df_items)
        st.dataframe(df_summary, use_container_width=True, hide_index=True)

        st.markdown("#### üßæ ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î/‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ")
        if df_discounts.empty:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
        else:
            df_discount_summary = (
                df_discounts
                .groupby("discount", as_index=False)
                .agg({"times": "sum", "amount": "sum"})
            )
            df_discount_summary = (
                df_discount_summary
                .rename(columns={
                    "discount": "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î",
                    "times": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                    "amount": "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏•‡∏î",
                })
                .sort_values(["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏•‡∏î"], ascending=[False, True])
            )
            st.dataframe(df_discount_summary, use_container_width=True, hide_index=True)

        c1, c2 = st.columns(2)
        with c1:
            st.download_button("‚¨áÔ∏è Export CSV ‚Äî ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", export_csv_to_bytes(df_summary), file_name="EJ_items_summary.csv", mime="text/csv", use_container_width=True)
        with c2:
            st.download_button("‚¨áÔ∏è Export Excel ‚Äî ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", export_excel_to_bytes(df_summary), file_name="EJ_items_summary.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", use_container_width=True)

        if not df_discounts.empty:
            c3, c4 = st.columns(2)
            with c3:
                st.download_button("‚¨áÔ∏è Export CSV ‚Äî ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î/‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á", export_csv_to_bytes(df_discount_summary), file_name="EJ_discounts_summary.csv", mime="text/csv", use_container_width=True)
            with c4:
                st.download_button("‚¨áÔ∏è Export Excel ‚Äî ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î/‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á", export_excel_to_bytes(df_discount_summary, sheet_name="‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î"), file_name="EJ_discounts_summary.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", use_container_width=True)

# ==================== FOOTER ====================
st.markdown("---")
st.caption("üíæ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏° Restart App ‡∏´‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ SQL ‚Ä¢ ‡πÇ‡∏õ‡∏£: 3‡∏ä‡∏¥‡πâ‡∏ô100‚Üí50‡∏ø, 4‡∏ä‡∏¥‡πâ‡∏ô100‚Üí35‡∏ø, 50/2‡∏ä‡∏¥‡πâ‡∏ô100‚Üí80‡∏ø ‚Ä¢ ITEMPARMCODE=000001 ‚Ä¢ TAXCODE_1=01")
